const SHOPIFY_CONFIG = {
  SHOP_DOMAIN: 'fsr2021.myshopify.com',
  ACCESS_TOKEN: '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',
  API_VERSION: '2024-01',
  
  SPREADSHEET_ID: '1b5On_VvQF-6i634aXhSHwjMIY_m-f2SLhPnBMfM1cJo',
  ORDERS_SHEET: 'Orders',
  SHOPIFY_SHEET: 'Order -> Shopify',
  
  PAYMENT_GATEWAY: 'stripe',
  BATCH_LIMIT: 5,
  LOCATION_ID: '62225154200',  // KJ Warehouse
  
  WALLETS: {
    'AÊ¨æ‚Äî‚Äî‰∏∞ÁõõÊ¨æ': '47357796188312',
    'BÊ¨æ‚Äî‚ÄîËÅöË¥¢Ê¨æ': '47357796221080',
    'CÊ¨æ‚Äî‚ÄîÂØåË±™Ê¨æ': '47357796253848',
    'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': '47357796286616',
    'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': '47357796319384'
  },
  
  PRICES: {
    'AÊ¨æ‚Äî‚Äî‰∏∞ÁõõÊ¨æ': '496.00',
    'BÊ¨æ‚Äî‚ÄîËÅöË¥¢Ê¨æ': '496.00',
    'CÊ¨æ‚Äî‚ÄîÂØåË±™Ê¨æ': '397.00',
    'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': '468.00',
    'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': '468.00'
  },
  
  DISCOUNT: {
    PRODUCTS: ['DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ', 'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ'],
    QTY_1_DISCOUNT: 234.00,
    QTY_2_PLUS_DISCOUNT: 281.00
  },
  
  BUNDLE_VARIANTS: {
    'FÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ+Âê∏ÈáëÊ¨æ': '47377444274328',
    'GÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': '47377444307096',
    'HÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': '47377444339864'
  },
  
  WALLET_ALIASES: {
    'AÊ¨æÔºà‰∏∞ÁõõÊ¨æÔºâ': 'AÊ¨æ‚Äî‚Äî‰∏∞ÁõõÊ¨æ',
    'BÊ¨æÔºàËÅöË¥¢Ê¨æÔºâ': 'BÊ¨æ‚Äî‚ÄîËÅöË¥¢Ê¨æ',
    'CÊ¨æÔºàÂØåË±™Ê¨æÔºâ': 'CÊ¨æ‚Äî‚ÄîÂØåË±™Ê¨æ',
    'DÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æÔºâ': 'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ',
    'DÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æx1Ôºâ': 'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ',
    'EÊ¨æÔºàÂê∏ÈáëÊ¨æÔºâ': 'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ',
    'EÊ¨æÔºàÂê∏ÈáëÊ¨æx1Ôºâ': 'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ'
  },
  
  BUNDLES: {
    'FÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æx1+Âê∏ÈáëÊ¨æx1Ôºâ': {
      'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': 1,
      'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': 1
    },
    'GÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æx2Ôºâ': {
      'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': 2
    },
    'HÊ¨æÔºàÂê∏ÈáëÊ¨æx2Ôºâ': {
      'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': 2
    }
  },
  
  GIFTS: {
    SEED: '42948256792728',
    COIN_SINGLE: '47298925953176',
    COIN_BAG: '47298927001752'
  },
  
  GOLDEN_CARDS: {
    'ÈúáÂÆ´': '47294134386840',
    'Â∑ΩÂÆ´': '47294134223000',
    '‰πæÂÆ´': '47294133665944',
    'Á¶ªÂÆ´': '47294133600408',
    'Âù§ÂÆ´': '47294132519064',
    'ÂùéÂÆ´': '47294132224152',
    'ËâÆÂÆ´': '47294132191384',
    'ÂÖëÂÆ´': '47294131011736'
  }
};

function formatPhoneNumber(phone) {
  if (!phone || phone === 'N/A') return '';
  let cleaned = phone.replace(/[^\d+]/g, '');
  if (cleaned.startsWith('+')) return cleaned;
  if (cleaned.startsWith('00')) return '+' + cleaned.substring(2);
  if (cleaned.match(/^(01|6)/)) {
    return cleaned.startsWith('6') ? '+' + cleaned : '+6' + cleaned;
  }
  if (cleaned.length === 8 && cleaned.match(/^[689]/)) return '+65' + cleaned;
  if (cleaned.length === 11 && cleaned.startsWith('1')) return '+86' + cleaned;
  if (cleaned.length === 8) return '+852' + cleaned;
  if (cleaned.startsWith('8') && cleaned.length >= 10) return '+62' + cleaned;
  if (cleaned.startsWith('62')) return '+' + cleaned;
  if (cleaned.startsWith('66')) return '+' + cleaned;
  if (cleaned.startsWith('9') && cleaned.length === 10) return '+63' + cleaned;
  if (cleaned.startsWith('63')) return '+' + cleaned;
  if (cleaned.startsWith('84')) return '+' + cleaned;
  if (cleaned.length >= 10) return '+' + cleaned;
  return '+' + cleaned;
}

function normalizeProductString(str) {
  if (!str) return '';
  return str.replace(/\s+Ôºà/g, 'Ôºà').replace(/Ôºâ\s+/g, 'Ôºâ').replace(/\s+‚Äî‚Äî/g, '‚Äî‚Äî').replace(/‚Äî‚Äî\s+/g, '‚Äî‚Äî').replace(/\s+/g, ' ').trim();
}

function convertToShopifyName(ghlName) {
  const normalized = normalizeProductString(ghlName);
  if (SHOPIFY_CONFIG.WALLET_ALIASES[normalized]) return SHOPIFY_CONFIG.WALLET_ALIASES[normalized];
  if (SHOPIFY_CONFIG.WALLETS[normalized]) return normalized;
  const converted = normalized.replace(/Ôºà/g, '‚Äî‚Äî').replace(/Ôºâ/g, '');
  if (SHOPIFY_CONFIG.WALLETS[converted]) return converted;
  return normalized;
}

function parseGoldenCards(goldenCardData) {
  const goldenCards = [];
  if (!goldenCardData || goldenCardData === '' || goldenCardData === 'N/A') return goldenCards;
  Logger.log('üé¥ Parsing Golden Card data: ' + goldenCardData);
  const parts = goldenCardData.split('|');
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i].trim();
    const match = part.match(/^(.+?)x(\d+)$/);
    if (match) {
      const cardName = match[1].trim();
      const quantity = parseInt(match[2]);
      const variantId = SHOPIFY_CONFIG.GOLDEN_CARDS[cardName];
      if (variantId) {
        goldenCards.push({ name: cardName, variantId: variantId, quantity: quantity });
        Logger.log('  ‚úì Golden Card: ' + cardName + ' x' + quantity);
      }
    }
  }
  return goldenCards;
}

function findCustomerByEmail(email) {
  const url = 'https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + '/customers/search.json?query=email:' + encodeURIComponent(email);
  const options = { method: 'get', headers: { 'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN }, muteHttpExceptions: true };
  try {
    const response = UrlFetchApp.fetch(url, options);
    if (response.getResponseCode() === 200) {
      const data = JSON.parse(response.getContentText());
      if (data.customers && data.customers.length > 0) {
        Logger.log('‚úì Found existing customer: ' + data.customers[0].id);
        return data.customers[0].id;
      }
    }
  } catch (error) {
    Logger.log('‚ö†Ô∏è Could not search for customer: ' + error.toString());
  }
  return null;
}

function processNextOrder() {
  const ss = SpreadsheetApp.openById(SHOPIFY_CONFIG.SPREADSHEET_ID);
  const sheet = ss.getSheetByName(SHOPIFY_CONFIG.ORDERS_SHEET);
  if (!sheet) {
    Logger.log('‚ùå Orders sheet not found!');
    return;
  }
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) {
    Logger.log('‚ÑπÔ∏è No orders found in sheet.');
    return;
  }
  const data = sheet.getRange(2, 1, lastRow - 1, 18).getValues();
  for (let i = 0; i < data.length; i++) {
    const rowIndex = i + 2;
    const status = String(data[i][13] || '').trim();
    const shopifyOrderId = data[i][15];
    if (status === 'Pending' && !shopifyOrderId) {
      Logger.log('üîÑ Processing next pending order - Row ' + rowIndex);
      processOrder(sheet, rowIndex, data[i]);
      Logger.log('‚úÖ Order processed for Row ' + rowIndex);
      return;
    }
  }
  Logger.log('‚úÖ All Done - No pending orders found.');
}

function processOrder(sheet, rowIndex, rowData) {
  try {
    const rawPhone = String(rowData[4] || '').trim();
    const formattedPhone = formatPhoneNumber(rawPhone);
    const orderInfo = {
      name: String(rowData[2] || 'N/A').trim(),
      email: String(rowData[3] || '').trim(),
      phone: formattedPhone,
      phoneOriginal: rawPhone,
      address: String(rowData[5] || 'N/A').trim(),
      city: String(rowData[6] || 'N/A').trim(),
      state: String(rowData[7] || 'N/A').trim(),
      postcode: String(rowData[8] || 'N/A').trim(),
      orderSummary: String(rowData[11] || '').trim(),
      totalPrice: String(rowData[12] || '').trim(),
      goldenCardData: String(rowData[17] || '').trim()
    };
    if (rawPhone && rawPhone !== formattedPhone) {
      Logger.log('üìû Phone formatted: ' + rawPhone + ' ‚Üí ' + formattedPhone);
    }
    if (!orderInfo.email || orderInfo.email === 'N/A') throw new Error('Email is required');
    if (!orderInfo.orderSummary) throw new Error('Order Summary is empty');
    Logger.log('üì¶ Order Summary: ' + orderInfo.orderSummary);
    const products = parseProducts(orderInfo.orderSummary);
    if (products.length === 0) throw new Error('No valid products found in Order Summary');
    Logger.log('‚úì Found ' + products.length + ' product types');
    for (let i = 0; i < products.length; i++) {
      Logger.log('  ‚Ä¢ ' + products[i].name + ' x' + products[i].quantity + ' @ RM' + products[i].price);
    }
    const totalWallets = products.reduce(function(sum, p) { return sum + p.quantity; }, 0);
    Logger.log('üëõ Total wallets: ' + totalWallets);
    const goldenCards = parseGoldenCards(orderInfo.goldenCardData);
    Logger.log('üé¥ Golden Cards found: ' + goldenCards.length);
    const gifts = calculateGifts(totalWallets);
    const lineItems = [];
    for (let i = 0; i < products.length; i++) {
      const lineItem = { variant_id: products[i].variantId, quantity: products[i].quantity };
      if (!products[i].isBundle && products[i].price) lineItem.price = products[i].price;
      lineItems.push(lineItem);
    }
    for (let i = 0; i < goldenCards.length; i++) {
      lineItems.push({ variant_id: goldenCards[i].variantId, quantity: goldenCards[i].quantity, price: '0.00' });
      Logger.log('  ‚úì Added Golden Card: ' + goldenCards[i].name + ' x' + goldenCards[i].quantity);
    }
    for (let i = 0; i < gifts.length; i++) {
      lineItems.push({ variant_id: gifts[i].variantId, quantity: gifts[i].quantity, price: '0.00' });
    }
    Logger.log('üìù Creating Shopify order with ' + lineItems.length + ' line items...');
    const result = createShopifyOrder(orderInfo, lineItems);
    if (result && result.order) {
      const orderNumber = result.order.name;
      Logger.log('‚úÖ Order created: ' + orderNumber);
      sheet.getRange(rowIndex, 14).setValue('Created');
      sheet.getRange(rowIndex, 16).setValue(orderNumber);
      sheet.getRange(rowIndex, 15).setValue('‚úì Created: ' + orderNumber);
      copyToShopifySheet(orderInfo, orderNumber);
      Logger.log('‚úÖ Order processing complete!');
    } else {
      throw new Error('No response from Shopify API');
    }
  } catch (error) {
    Logger.log('‚ùå Error: ' + error.toString());
    sheet.getRange(rowIndex, 14).setValue('Error');
    sheet.getRange(rowIndex, 15).setValue('‚ùå ' + error.toString());
    throw error;
  }
}

function smartSplit(str) {
  const parts = [];
  let currentPart = '';
  let depth = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str[i];
    if (char === 'Ôºà' || char === '(') {
      depth++;
      currentPart += char;
    } else if (char === 'Ôºâ' || char === ')') {
      depth--;
      currentPart += char;
    } else if (char === '+' && depth === 0) {
      if (currentPart.trim()) parts.push(currentPart.trim());
      currentPart = '';
    } else {
      currentPart += char;
    }
  }
  if (currentPart.trim()) parts.push(currentPart.trim());
  return parts;
}

function parseProducts(orderSummary) {
  const foundProducts = {};
  const foundBundles = [];
  let bundleItemCount = 0;
  const normalizedSummary = normalizeProductString(orderSummary);
  Logger.log('üìù Normalized Summary: ' + normalizedSummary);
  const parts = smartSplit(normalizedSummary);
  for (let p = 0; p < parts.length; p++) {
    const part = parts[p].trim();
    let productFound = false;
    for (const bundleName in SHOPIFY_CONFIG.BUNDLES) {
      const normalizedBundleName = normalizeProductString(bundleName);
      if (part.indexOf(normalizedBundleName) !== 0) continue;
      Logger.log('  ‚úì Found bundle: ' + bundleName);
      let bundleQty = 1;
      const afterBundleName = part.substring(normalizedBundleName.length).trim();
      const qtyMatch = afterBundleName.match(/^[xX√ó]\s*([0-9]+)/);
      if (qtyMatch && qtyMatch[1]) bundleQty = parseInt(qtyMatch[1]);
      let standardBundleName = bundleName;
      if (bundleName === 'FÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æx1+Âê∏ÈáëÊ¨æx1Ôºâ') standardBundleName = 'FÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ+Âê∏ÈáëÊ¨æ';
      else if (bundleName === 'GÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æx2Ôºâ') standardBundleName = 'GÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ';
      else if (bundleName === 'HÊ¨æÔºàÂê∏ÈáëÊ¨æx2Ôºâ') standardBundleName = 'HÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ';
      foundBundles.push({ name: standardBundleName, variantId: SHOPIFY_CONFIG.BUNDLE_VARIANTS[standardBundleName], quantity: bundleQty, isBundle: true });
      const bundleContents = SHOPIFY_CONFIG.BUNDLES[bundleName];
      for (const walletName in bundleContents) {
        bundleItemCount += bundleContents[walletName] * bundleQty;
      }
      productFound = true;
      break;
    }
    if (!productFound) {
      const convertedPart = convertToShopifyName(part.split(/[xX√ó]/)[0].trim());
      for (const name in SHOPIFY_CONFIG.WALLETS) {
        const normalizedName = normalizeProductString(name);
        const normalizedConverted = normalizeProductString(convertedPart);
        if (normalizedConverted === normalizedName || part.indexOf(normalizedName) === 0) {
          let qty = 1;
          const qtyMatch = part.match(/[xX√ó]\s*([0-9]+)/);
          if (qtyMatch && qtyMatch[1]) qty = parseInt(qtyMatch[1]);
          foundProducts[name] = (foundProducts[name] || 0) + qty;
          productFound = true;
          break;
        }
      }
      if (!productFound) {
        for (const alias in SHOPIFY_CONFIG.WALLET_ALIASES) {
          if (part.indexOf(normalizeProductString(alias)) === 0) {
            const shopifyName = SHOPIFY_CONFIG.WALLET_ALIASES[alias];
            let qty = 1;
            const qtyMatch = part.match(/[xX√ó]\s*([0-9]+)/);
            if (qtyMatch && qtyMatch[1]) qty = parseInt(qtyMatch[1]);
            foundProducts[shopifyName] = (foundProducts[shopifyName] || 0) + qty;
            productFound = true;
            break;
          }
        }
      }
    }
  }
  const hasBundles = foundBundles.length > 0;
  let totalDiscountQty = 0;
  for (const name in foundProducts) {
    if (SHOPIFY_CONFIG.DISCOUNT.PRODUCTS.indexOf(name) !== -1) totalDiscountQty += foundProducts[name];
  }
  let discountPerItem = 0;
  if (totalDiscountQty === 1 && !hasBundles) discountPerItem = SHOPIFY_CONFIG.DISCOUNT.QTY_1_DISCOUNT;
  else if (totalDiscountQty >= 2 || hasBundles) discountPerItem = SHOPIFY_CONFIG.DISCOUNT.QTY_2_PLUS_DISCOUNT;
  const products = [];
  for (const name in foundProducts) {
    const quantity = foundProducts[name];
    const originalPrice = parseFloat(SHOPIFY_CONFIG.PRICES[name] || '0.00');
    let finalPrice = originalPrice;
    if (SHOPIFY_CONFIG.DISCOUNT.PRODUCTS.indexOf(name) !== -1 && discountPerItem > 0) {
      finalPrice = originalPrice - discountPerItem;
    }
    products.push({ name: name, variantId: SHOPIFY_CONFIG.WALLETS[name], quantity: quantity, price: finalPrice.toFixed(2), isBundle: false });
  }
  for (let i = 0; i < foundBundles.length; i++) products.push(foundBundles[i]);
  return products;
}

function calculateGifts(totalWallets) {
  const gifts = [];
  if (totalWallets === 0) return gifts;
  gifts.push({ name: '2026‰∏ç‰∏πÈæôÈíûÈí±Áßç', variantId: SHOPIFY_CONFIG.GIFTS.SEED, quantity: totalWallets });
  if (totalWallets >= 2) {
    const bagCount = Math.floor(totalWallets / 2);
    const singleCount = totalWallets % 2;
    if (bagCount > 0) gifts.push({ name: 'Copper Coin + Velvet drawstring', variantId: SHOPIFY_CONFIG.GIFTS.COIN_BAG, quantity: bagCount });
    if (singleCount > 0) gifts.push({ name: 'COPPER COIN', variantId: SHOPIFY_CONFIG.GIFTS.COIN_SINGLE, quantity: singleCount });
  }
  return gifts;
}

function createShopifyOrder(orderInfo, lineItems) {
  const draftUrl = 'https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + '/draft_orders.json';
  const address = { first_name: orderInfo.name, address1: orderInfo.address, phone: orderInfo.phone || '', city: orderInfo.city, province: orderInfo.state, country: 'MY', zip: orderInfo.postcode };
  Logger.log('üîç Searching for existing customer with email: ' + orderInfo.email);
  const existingCustomerId = findCustomerByEmail(orderInfo.email);
  let catalogTotal = 0;
  let discountedTotal = 0;
  for (let i = 0; i < lineItems.length; i++) {
    const item = lineItems[i];
    const discountPrice = item.price ? parseFloat(item.price) : 0;
    let catalogPrice = discountPrice;
    for (const name in SHOPIFY_CONFIG.WALLETS) {
      if (SHOPIFY_CONFIG.WALLETS[name] === item.variant_id) {
        catalogPrice = parseFloat(SHOPIFY_CONFIG.PRICES[name] || discountPrice);
        break;
      }
    }
    if (item.price) {
      discountedTotal += discountPrice * item.quantity;
      catalogTotal += catalogPrice * item.quantity;
    }
  }
  const discountAmount = (catalogTotal - discountedTotal).toFixed(2);
  const paymentId = 'pi_' + Utilities.getUuid().replace(/-/g, '').substring(0, 24);
  const draftPayload = {
    draft_order: {
      line_items: lineItems.map(function(item) { return { variant_id: item.variant_id, quantity: item.quantity }; }),
      customer: existingCustomerId ? { id: existingCustomerId } : { first_name: orderInfo.name, email: orderInfo.email },
      shipping_address: address,
      billing_address: address,
      email: orderInfo.email,
      tags: 'GHL-Import',
      use_customer_default_address: false,
      applied_discount: parseFloat(discountAmount) > 0 ? { description: 'Promotion Discount', value_type: 'fixed_amount', value: discountAmount, amount: discountAmount } : null
    }
  };
  try {
    const draftResp = UrlFetchApp.fetch(draftUrl, { method: 'post', contentType: 'application/json', headers: { 'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN }, payload: JSON.stringify(draftPayload), muteHttpExceptions: true });
    if (draftResp.getResponseCode() !== 201) throw new Error('Failed to create draft');
    const draftData = JSON.parse(draftResp.getContentText());
    const draftId = draftData.draft_order.id;
    Logger.log('‚úì Draft created: ' + draftId);
    const completeResp = UrlFetchApp.fetch('https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + '/draft_orders/' + draftId + '/complete.json', { method: 'put', contentType: 'application/json', headers: { 'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN }, payload: JSON.stringify({ payment_pending: true, location_id: SHOPIFY_CONFIG.LOCATION_ID }), muteHttpExceptions: true });
    if (completeResp.getResponseCode() !== 200) throw new Error('Failed to complete draft');
    const orderId = JSON.parse(completeResp.getContentText()).draft_order.order_id;
    Logger.log('‚úì Order created: ' + orderId);
    Utilities.sleep(1500);
    const order = JSON.parse(UrlFetchApp.fetch('https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + '/orders/' + orderId + '.json', { method: 'get', headers: { 'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN }, muteHttpExceptions: true }).getContentText()).order;
    const transResp = UrlFetchApp.fetch('https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + '/orders/' + orderId + '/transactions.json', { method: 'post', contentType: 'application/json', headers: { 'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN }, payload: JSON.stringify({ transaction: { kind: 'sale', status: 'success', amount: order.total_price, gateway: 'stripe', source: 'external', authorization: paymentId, currency: 'MYR' }}), muteHttpExceptions: true });
    if (transResp.getResponseCode() !== 201) throw new Error('Failed to add payment');
    Logger.log('‚úì Payment recorded');
    Utilities.sleep(2000);
    Logger.log('üìç Moving fulfillment to KJ Warehouse...');
    const fulfillmentOrdersResp = UrlFetchApp.fetch('https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + '/orders/' + orderId + '/fulfillment_orders.json', { method: 'get', headers: { 'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN }, muteHttpExceptions: true });
    if (fulfillmentOrdersResp.getResponseCode() === 200) {
      const fulfillmentOrders = JSON.parse(fulfillmentOrdersResp.getContentText()).fulfillment_orders || [];
      Logger.log('üì¶ Found ' + fulfillmentOrders.length + ' fulfillment order(s)');
      for (let i = 0; i < fulfillmentOrders.length; i++) {
        const moveResp = UrlFetchApp.fetch('https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + '/fulfillment_orders/' + fulfillmentOrders[i].id + '/move.json', { method: 'post', contentType: 'application/json', headers: { 'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN }, payload: JSON.stringify({ fulfillment_order: { new_location_id: parseInt(SHOPIFY_CONFIG.LOCATION_ID) }}), muteHttpExceptions: true });
        if (moveResp.getResponseCode() === 200) Logger.log('‚úì Moved to KJ Warehouse');
      }
    }
    return { order: order };
  } catch (error) {
    Logger.log('‚ùå Failed: ' + error.toString());
    throw error;
  }
}

function copyToShopifySheet(orderInfo, shopifyOrderId) {
  try {
    const ss = SpreadsheetApp.openById(SHOPIFY_CONFIG.SPREADSHEET_ID);
    let sheet = ss.getSheetByName(SHOPIFY_CONFIG.SHOPIFY_SHEET);
    if (!sheet) {
      sheet = ss.insertSheet(SHOPIFY_CONFIG.SHOPIFY_SHEET);
      sheet.getRange(1, 1, 1, 7).setValues([['Timestamp', 'Name', 'Email', 'Phone', 'Order Summary', 'Total Price', 'Shopify Order ID']]).setFontWeight('bold').setBackground('#34A853').setFontColor('white');
      sheet.setFrozenRows(1);
    }
    sheet.appendRow([new Date(), orderInfo.name, orderInfo.email, orderInfo.phone, orderInfo.orderSummary, orderInfo.totalPrice, shopifyOrderId]);
    SpreadsheetApp.flush();
  } catch (error) {
    Logger.log('‚ö†Ô∏è Could not copy to sheet');
  }
}

function processAllPendingOrders() {
  const ss = SpreadsheetApp.openById(SHOPIFY_CONFIG.SPREADSHEET_ID);
  const sheet = ss.getSheetByName(SHOPIFY_CONFIG.ORDERS_SHEET);
  if (!sheet) {
    SpreadsheetApp.getUi().alert('Error', 'Orders sheet not found', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) {
    SpreadsheetApp.getUi().alert('Info', 'No orders to process', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  const data = sheet.getRange(2, 1, lastRow - 1, 18).getValues();
  let processed = 0;
  let errors = 0;
  for (let i = 0; i < data.length; i++) {
    if (processed >= SHOPIFY_CONFIG.BATCH_LIMIT) break;
    const rowIndex = i + 2;
    if (String(data[i][13] || '').trim() === 'Pending' && !data[i][15]) {
      try {
        processOrder(sheet, rowIndex, data[i]);
        processed++;
        Utilities.sleep(2000);
      } catch (error) {
        errors++;
      }
    }
  }
  SpreadsheetApp.getUi().alert('Process Complete', 'Processed: ' + processed + ' orders\nErrors: ' + errors + '\nBatch Limit: ' + SHOPIFY_CONFIG.BATCH_LIMIT, SpreadsheetApp.getUi().ButtonSet.OK);
}

function setupShopifyColumns() {
  const ss = SpreadsheetApp.openById(SHOPIFY_CONFIG.SPREADSHEET_ID);
  const sheet = ss.getSheetByName(SHOPIFY_CONFIG.ORDERS_SHEET);
  if (!sheet) return;
  const lastCol = sheet.getLastColumn();
  const headers = sheet.getRange(1, 1, 1, lastCol).getValues()[0];
  const required = ['Status', 'Error Message', 'Shopify Order ID'];
  for (let i = 0; i < required.length; i++) {
    if (headers.indexOf(required[i]) === -1) {
      sheet.getRange(1, lastCol + 1).setValue(required[i]).setFontWeight('bold').setBackground('#4285f4').setFontColor('white');
    }
  }
  Logger.log('‚úÖ Setup complete');
}
