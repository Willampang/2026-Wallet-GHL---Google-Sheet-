const SHOPIFY_CONFIG = {
  SHOP_DOMAIN: 'fsr2021.myshopify.com',
  ACCESS_TOKEN: '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',
  API_VERSION: '2024-01',
  
  SPREADSHEET_ID: '1b5On_VvQF-6i634aXhSHwjMIY_m-f2SLhPnBMfM1cJo',
  ORDERS_SHEET: 'Orders',  // UPDATED SHEET NAME
  SHOPIFY_SHEET: 'Order -> Shopify',
  
  // Payment Gateway - Set to Stripe
  PAYMENT_GATEWAY: 'stripe',
  
  // Batch Processing Limit - Change this number to process more/fewer orders at once
  BATCH_LIMIT: 5,  // Process 5 orders at a time (change as needed)
  
  WALLETS: {
    'AÊ¨æ‚Äî‚Äî‰∏∞ÁõõÊ¨æ': '47357796188312',
    'BÊ¨æ‚Äî‚ÄîËÅöË¥¢Ê¨æ': '47357796221080',
    'CÊ¨æ‚Äî‚ÄîÂØåË±™Ê¨æ': '47357796253848',
    'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': '47357796286616',
    'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': '47357796319384'
  },
  
  // Product Prices - From Shopify JSON
  PRICES: {
    'AÊ¨æ‚Äî‚Äî‰∏∞ÁõõÊ¨æ': '496.00',
    'BÊ¨æ‚Äî‚ÄîËÅöË¥¢Ê¨æ': '496.00',
    'CÊ¨æ‚Äî‚ÄîÂØåË±™Ê¨æ': '397.00',
    'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': '468.00',
    'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': '468.00'
  },
  
  // Discount Configuration - Discount amounts to deduct
  DISCOUNT: {
    PRODUCTS: ['DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ', 'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ'],
    QTY_1_DISCOUNT: 234.00,
    QTY_2_PLUS_DISCOUNT: 281.00
  },
  
  // Alternative names mapping (GHL format ‚Üí Shopify format)
  WALLET_ALIASES: {
    'AÊ¨æÔºà‰∏∞ÁõõÊ¨æÔºâ': 'AÊ¨æ‚Äî‚Äî‰∏∞ÁõõÊ¨æ',
    'BÊ¨æÔºàËÅöË¥¢Ê¨æÔºâ': 'BÊ¨æ‚Äî‚ÄîËÅöË¥¢Ê¨æ',
    'CÊ¨æÔºàÂØåË±™Ê¨æÔºâ': 'CÊ¨æ‚Äî‚ÄîÂØåË±™Ê¨æ',
    'DÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æÔºâ': 'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ',
    'DÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æx1Ôºâ': 'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ',
    'EÊ¨æÔºàÂê∏ÈáëÊ¨æÔºâ': 'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ',
    'EÊ¨æÔºàÂê∏ÈáëÊ¨æx1Ôºâ': 'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ'
  },
  
  // Bundle Products
  BUNDLES: {
    'FÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æx1+Âê∏ÈáëÊ¨æx1Ôºâ': {
      'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': 1,
      'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': 1
    },
    'GÊ¨æÔºàÂ∏¶Ë¥¢Ê¨æx2Ôºâ': {
      'DÊ¨æ‚Äî‚ÄîÂ∏¶Ë¥¢Ê¨æ': 2
    },
    'HÊ¨æÔºàÂê∏ÈáëÊ¨æx2Ôºâ': {
      'EÊ¨æ‚Äî‚ÄîÂê∏ÈáëÊ¨æ': 2
    }
  },
  
  // Free Gift Variant IDs
  GIFTS: {
    SEED: '42948256792728',
    COIN_SINGLE: '47298925953176',
    COIN_BAG: '47298927001752'
  },
  
  // Golden Card Variant IDs - NEW!
  GOLDEN_CARDS: {
    'ÈúáÂÆ´': '47294134386840',
    'Â∑ΩÂÆ´': '47294134223000',
    '‰πæÂÆ´': '47294133665944',
    'Á¶ªÂÆ´': '47294133600408',
    'Âù§ÂÆ´': '47294132519064',
    'ÂùéÂÆ´': '47294132224152',
    'ËâÆÂÆ´': '47294132191384',
    'ÂÖëÂÆ´': '47294131011736'
  }
};

// ===== PHONE NUMBER FORMATTING =====
function formatPhoneNumber(phone) {
  if (!phone || phone === 'N/A') return '';
  
  let cleaned = phone.replace(/[^\d+]/g, '');
  
  if (cleaned.startsWith('+')) return cleaned;
  if (cleaned.startsWith('00')) return '+' + cleaned.substring(2);
  
  if (cleaned.match(/^(01|6)/)) {
    return cleaned.startsWith('6') ? '+' + cleaned : '+6' + cleaned;
  }
  
  if (cleaned.length === 8 && cleaned.match(/^[689]/)) return '+65' + cleaned;
  if (cleaned.length === 11 && cleaned.startsWith('1')) return '+86' + cleaned;
  if (cleaned.length === 8) return '+852' + cleaned;
  if (cleaned.startsWith('8') && cleaned.length >= 10) return '+62' + cleaned;
  if (cleaned.startsWith('62')) return '+' + cleaned;
  if (cleaned.startsWith('66')) return '+' + cleaned;
  if (cleaned.startsWith('9') && cleaned.length === 10) return '+63' + cleaned;
  if (cleaned.startsWith('63')) return '+' + cleaned;
  if (cleaned.startsWith('84')) return '+' + cleaned;
  
  if (cleaned.length >= 10) return '+' + cleaned;
  return '+' + cleaned;
}

// ===== NORMALIZE PRODUCT STRING =====
function normalizeProductString(str) {
  if (!str) return '';
  
  return str
    .replace(/\s+Ôºà/g, 'Ôºà')
    .replace(/Ôºâ\s+/g, 'Ôºâ')
    .replace(/\s+‚Äî‚Äî/g, '‚Äî‚Äî')
    .replace(/‚Äî‚Äî\s+/g, '‚Äî‚Äî')
    .replace(/\s+/g, ' ')
    .trim();
}

// ===== CONVERT TO SHOPIFY NAME =====
function convertToShopifyName(ghlName) {
  const normalized = normalizeProductString(ghlName);
  
  if (SHOPIFY_CONFIG.WALLET_ALIASES[normalized]) {
    return SHOPIFY_CONFIG.WALLET_ALIASES[normalized];
  }
  
  if (SHOPIFY_CONFIG.WALLETS[normalized]) {
    return normalized;
  }
  
  const converted = normalized.replace(/Ôºà/g, '‚Äî‚Äî').replace(/Ôºâ/g, '');
  
  if (SHOPIFY_CONFIG.WALLETS[converted]) {
    return converted;
  }
  
  return normalized;
}

// ===== PARSE GOLDEN CARD DATA FROM COLUMN R =====
// Input: "ÈúáÂÆ´x2 | Á¶ªÂÆ´x1"
// Output: [{ name: 'ÈúáÂÆ´', variantId: '47294134386840', quantity: 2 }, ...]
function parseGoldenCards(goldenCardData) {
  const goldenCards = [];
  
  if (!goldenCardData || goldenCardData === '' || goldenCardData === 'N/A') {
    return goldenCards;
  }
  
  Logger.log('üé¥ Parsing Golden Card data: ' + goldenCardData);
  
  // Split by | separator
  const parts = goldenCardData.split('|');
  
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i].trim();
    
    // Match pattern like "ÈúáÂÆ´x2"
    const match = part.match(/^(.+?)x(\d+)$/);
    
    if (match) {
      const cardName = match[1].trim();
      const quantity = parseInt(match[2]);
      
      // Get variant ID from config
      const variantId = SHOPIFY_CONFIG.GOLDEN_CARDS[cardName];
      
      if (variantId) {
        goldenCards.push({
          name: cardName,
          variantId: variantId,
          quantity: quantity
        });
        Logger.log('  ‚úì Golden Card: ' + cardName + ' x' + quantity + ' (Variant ID: ' + variantId + ')');
      } else {
        Logger.log('  ‚ö†Ô∏è Unknown Golden Card: ' + cardName);
      }
    }
  }
  
  return goldenCards;
}

// ===== FIND EXISTING CUSTOMER BY EMAIL =====
function findCustomerByEmail(email) {
  const url = 'https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + 
              '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + 
              '/customers/search.json?query=email:' + encodeURIComponent(email);
  
  const options = {
    method: 'get',
    headers: {
      'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN
    },
    muteHttpExceptions: true
  };
  
  try {
    const response = UrlFetchApp.fetch(url, options);
    
    if (response.getResponseCode() === 200) {
      const data = JSON.parse(response.getContentText());
      
      if (data.customers && data.customers.length > 0) {
        Logger.log('‚úì Found existing customer: ' + data.customers[0].id);
        return data.customers[0].id;
      }
    }
  } catch (error) {
    Logger.log('‚ö†Ô∏è Could not search for customer: ' + error.toString());
  }
  
  return null;
}

// ===== MANUAL PROCESS - NEXT PENDING ROW =====
function processNextOrder() {
  const ss = SpreadsheetApp.openById(SHOPIFY_CONFIG.SPREADSHEET_ID);
  const sheet = ss.getSheetByName(SHOPIFY_CONFIG.ORDERS_SHEET);
  
  if (!sheet) {
    Logger.log('‚ùå Orders sheet not found!');
    return;
  }
  
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) {
    Logger.log('‚ÑπÔ∏è No orders found in sheet.');
    return;
  }
  
  const data = sheet.getRange(2, 1, lastRow - 1, 18).getValues();  // Read up to column R (18)
  
  for (let i = 0; i < data.length; i++) {
    const rowIndex = i + 2;
    const status = String(data[i][13] || '').trim();  // Column N
    const shopifyOrderId = data[i][15];  // Column P
    
    if (status === 'Pending' && !shopifyOrderId) {
      Logger.log('üîÑ Processing next pending order - Row ' + rowIndex);
      processOrder(sheet, rowIndex, data[i]);
      Logger.log('‚úÖ Order processed for Row ' + rowIndex);
      return;
    }
  }
  
  Logger.log('‚úÖ All Done - No pending orders found.');
}

// ===== PROCESS ORDER FUNCTION =====
function processOrder(sheet, rowIndex, rowData) {
  try {
    const rawPhone = String(rowData[4] || '').trim();
    const formattedPhone = formatPhoneNumber(rawPhone);
    
    const orderInfo = {
      name: String(rowData[2] || 'N/A').trim(),
      email: String(rowData[3] || '').trim(),
      phone: formattedPhone,
      phoneOriginal: rawPhone,
      address: String(rowData[5] || 'N/A').trim(),
      city: String(rowData[6] || 'N/A').trim(),
      state: String(rowData[7] || 'N/A').trim(),
      postcode: String(rowData[8] || 'N/A').trim(),
      orderSummary: String(rowData[11] || '').trim(),  // Column L
      totalPrice: String(rowData[12] || '').trim(),
      goldenCardData: String(rowData[17] || '').trim()  // Column R - GOLDEN CARD DATA
    };
    
    if (rawPhone && rawPhone !== formattedPhone) {
      Logger.log('üìû Phone formatted: ' + rawPhone + ' ‚Üí ' + formattedPhone);
    }
    
    if (!orderInfo.email || orderInfo.email === 'N/A') {
      throw new Error('Email is required');
    }
    
    if (!orderInfo.orderSummary) {
      throw new Error('Order Summary is empty');
    }
    
    Logger.log('üì¶ Order Summary: ' + orderInfo.orderSummary);
    
    const products = parseProducts(orderInfo.orderSummary);
    
    if (products.length === 0) {
      throw new Error('No valid products found in Order Summary');
    }
    
    Logger.log('‚úì Found ' + products.length + ' product types');
    
    for (let i = 0; i < products.length; i++) {
      Logger.log('  ‚Ä¢ ' + products[i].name + ' x' + products[i].quantity + ' @ RM' + products[i].price);
    }
    
    const totalWallets = products.reduce(function(sum, p) {
      return sum + p.quantity;
    }, 0);
    
    Logger.log('üëõ Total wallets: ' + totalWallets);
    
    // Parse Golden Card data from Column R
    const goldenCards = parseGoldenCards(orderInfo.goldenCardData);
    Logger.log('üé¥ Golden Cards found: ' + goldenCards.length);
    
    const gifts = calculateGifts(totalWallets);
    Logger.log('üéÅ Free gifts: ' + JSON.stringify(gifts));
    
    const lineItems = [];
    
    // Add wallet products
    for (let i = 0; i < products.length; i++) {
      lineItems.push({
        variant_id: products[i].variantId,
        quantity: products[i].quantity,
        price: products[i].price
      });
    }
    
    // Add Golden Card products (FREE)
    for (let i = 0; i < goldenCards.length; i++) {
      lineItems.push({
        variant_id: goldenCards[i].variantId,
        quantity: goldenCards[i].quantity,
        price: '0.00'
      });
      Logger.log('  ‚úì Added Golden Card: ' + goldenCards[i].name + ' x' + goldenCards[i].quantity);
    }
    
    // Add free gifts
    for (let i = 0; i < gifts.length; i++) {
      lineItems.push({
        variant_id: gifts[i].variantId,
        quantity: gifts[i].quantity,
        price: '0.00'
      });
    }
    
    Logger.log('üìù Creating Shopify order with ' + lineItems.length + ' line items...');
    
    const result = createShopifyOrder(orderInfo, lineItems);
    
    if (result && result.order) {
      const orderNumber = result.order.name;
      
      Logger.log('‚úÖ Order created: ' + orderNumber);
      
      sheet.getRange(rowIndex, 14).setValue('Created');
      sheet.getRange(rowIndex, 16).setValue(orderNumber);
      sheet.getRange(rowIndex, 15).setValue('‚úì Created: ' + orderNumber);
      
      copyToShopifySheet(orderInfo, orderNumber);
      
      Logger.log('‚úÖ Order processing complete!');
      
    } else {
      throw new Error('No response from Shopify API');
    }
    
  } catch (error) {
    Logger.log('‚ùå Error: ' + error.toString());
    sheet.getRange(rowIndex, 14).setValue('Error');
    sheet.getRange(rowIndex, 15).setValue('‚ùå ' + error.toString());
    throw error;
  }
}

// ===== SMART SPLIT =====
function smartSplit(str) {
  const parts = [];
  let currentPart = '';
  let depth = 0;
  
  for (let i = 0; i < str.length; i++) {
    const char = str[i];
    
    if (char === 'Ôºà' || char === '(') {
      depth++;
      currentPart += char;
    } else if (char === 'Ôºâ' || char === ')') {
      depth--;
      currentPart += char;
    } else if (char === '+' && depth === 0) {
      if (currentPart.trim()) {
        parts.push(currentPart.trim());
      }
      currentPart = '';
    } else {
      currentPart += char;
    }
  }
  
  if (currentPart.trim()) {
    parts.push(currentPart.trim());
  }
  
  return parts;
}

// ===== PARSE PRODUCTS FROM ORDER SUMMARY =====
function parseProducts(orderSummary) {
  const foundProducts = {};
  
  const normalizedSummary = normalizeProductString(orderSummary);
  Logger.log('üìù Normalized Summary: ' + normalizedSummary);
  
  const parts = smartSplit(normalizedSummary);
  
  for (let p = 0; p < parts.length; p++) {
    const part = parts[p].trim();
    let productFound = false;
    
    Logger.log('  üîç Checking part: ' + part);
    
    for (const bundleName in SHOPIFY_CONFIG.BUNDLES) {
      const normalizedBundleName = normalizeProductString(bundleName);
      
      if (part.indexOf(normalizedBundleName) !== 0) continue;
      
      Logger.log('  ‚úì Found bundle: ' + bundleName);
      
      let bundleQty = 1;
      const afterBundleName = part.substring(normalizedBundleName.length).trim();
      const qtyMatch = afterBundleName.match(/^[xX√ó]\s*([0-9]+)/);
      
      if (qtyMatch && qtyMatch[1]) {
        bundleQty = parseInt(qtyMatch[1]);
        Logger.log('  ‚úì Quantity: ' + bundleQty);
      }
      
      const bundleContents = SHOPIFY_CONFIG.BUNDLES[bundleName];
      for (const walletName in bundleContents) {
        const walletQty = bundleContents[walletName] * bundleQty;
        
        if (foundProducts[walletName]) {
          foundProducts[walletName] += walletQty;
        } else {
          foundProducts[walletName] = walletQty;
        }
        
        Logger.log('  üì¶ Expanded ' + bundleName + ' x' + bundleQty + ' ‚Üí ' + walletName + ' x' + walletQty);
      }
      
      productFound = true;
      break;
    }
    
    if (!productFound) {
      const convertedPart = convertToShopifyName(part.split(/[xX√ó]/)[0].trim());
      
      Logger.log('  üîÑ Converted to: ' + convertedPart);
      
      for (const name in SHOPIFY_CONFIG.WALLETS) {
        const normalizedName = normalizeProductString(name);
        const normalizedConverted = normalizeProductString(convertedPart);
        
        if (normalizedConverted === normalizedName || part.indexOf(normalizedName) === 0) {
          Logger.log('  ‚úì Found wallet: ' + name);
          
          let qty = 1;
          const qtyMatch = part.match(/[xX√ó]\s*([0-9]+)/);
          
          if (qtyMatch && qtyMatch[1]) {
            qty = parseInt(qtyMatch[1]);
            Logger.log('  ‚úì Quantity: ' + qty);
          }
          
          if (foundProducts[name]) {
            foundProducts[name] += qty;
          } else {
            foundProducts[name] = qty;
          }
          
          productFound = true;
          break;
        }
      }
      
      if (!productFound) {
        for (const alias in SHOPIFY_CONFIG.WALLET_ALIASES) {
          const normalizedAlias = normalizeProductString(alias);
          
          if (part.indexOf(normalizedAlias) === 0) {
            const shopifyName = SHOPIFY_CONFIG.WALLET_ALIASES[alias];
            Logger.log('  ‚úì Found via alias: ' + alias + ' ‚Üí ' + shopifyName);
            
            let qty = 1;
            const qtyMatch = part.match(/[xX√ó]\s*([0-9]+)/);
            
            if (qtyMatch && qtyMatch[1]) {
              qty = parseInt(qtyMatch[1]);
              Logger.log('  ‚úì Quantity: ' + qty);
            }
            
            if (foundProducts[shopifyName]) {
              foundProducts[shopifyName] += qty;
            } else {
              foundProducts[shopifyName] = qty;
            }
            
            productFound = true;
            break;
          }
        }
      }
    }
    
    if (!productFound) {
      Logger.log('  ‚ö†Ô∏è No product found in part: ' + part);
    }
  }
  
  let totalDiscountQty = 0;
  for (const name in foundProducts) {
    if (SHOPIFY_CONFIG.DISCOUNT.PRODUCTS.indexOf(name) !== -1) {
      totalDiscountQty += foundProducts[name];
    }
  }
  
  Logger.log('üí∞ Total DÊ¨æ + EÊ¨æ quantity: ' + totalDiscountQty);
  
  let discountPerItem = 0;
  
  if (totalDiscountQty === 1) {
    discountPerItem = SHOPIFY_CONFIG.DISCOUNT.QTY_1_DISCOUNT;
    Logger.log('üí∞ Discount rule: RM' + discountPerItem.toFixed(2) + ' off each (only 1 DÊ¨æ or EÊ¨æ)');
  } else if (totalDiscountQty >= 2) {
    discountPerItem = SHOPIFY_CONFIG.DISCOUNT.QTY_2_PLUS_DISCOUNT;
    Logger.log('üí∞ Discount rule: RM' + discountPerItem.toFixed(2) + ' off each (2+ DÊ¨æ/EÊ¨æ combined)');
  }
  
  const products = [];
  for (const name in foundProducts) {
    const quantity = foundProducts[name];
    const originalPrice = parseFloat(SHOPIFY_CONFIG.PRICES[name] || '0.00');
    let finalPrice = originalPrice;
    
    if (SHOPIFY_CONFIG.DISCOUNT.PRODUCTS.indexOf(name) !== -1 && discountPerItem > 0) {
      finalPrice = originalPrice - discountPerItem;
      Logger.log('  üíµ ' + name + ': RM' + originalPrice.toFixed(2) + ' - RM' + discountPerItem.toFixed(2) + ' = RM' + finalPrice.toFixed(2));
    }
    
    products.push({
      name: name,
      variantId: SHOPIFY_CONFIG.WALLETS[name],
      quantity: quantity,
      price: finalPrice.toFixed(2)
    });
  }
  
  return products;
}

// ===== CALCULATE FREE GIFTS =====
function calculateGifts(totalWallets) {
  const gifts = [];
  
  if (totalWallets === 0) return gifts;
  
  gifts.push({
    name: '2026‰∏ç‰∏πÈæôÈíûÈí±Áßç',
    variantId: SHOPIFY_CONFIG.GIFTS.SEED,
    quantity: totalWallets
  });
  
  if (totalWallets >= 2) {
    const bagCount = Math.floor(totalWallets / 2);
    const singleCount = totalWallets % 2;
    
    if (bagCount > 0) {
      gifts.push({
        name: 'Copper Coin + Velvet drawstring',
        variantId: SHOPIFY_CONFIG.GIFTS.COIN_BAG,
        quantity: bagCount
      });
    }
    
    if (singleCount > 0) {
      gifts.push({
        name: 'COPPER COIN',
        variantId: SHOPIFY_CONFIG.GIFTS.COIN_SINGLE,
        quantity: singleCount
      });
    }
  }
  
  return gifts;
}

// ===== CREATE SHOPIFY ORDER (OPTIMIZED FOR SAGE 300) =====
function createShopifyOrder(orderInfo, lineItems) {
  const draftUrl = 'https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + 
                   '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + '/draft_orders.json';
  
  const address = {
    first_name: orderInfo.name,
    address1: orderInfo.address,
    phone: orderInfo.phone || '',
    city: orderInfo.city,
    province: orderInfo.state,
    country: 'MY',
    zip: orderInfo.postcode
  };
  
  Logger.log('üîç Searching for existing customer with email: ' + orderInfo.email);
  const existingCustomerId = findCustomerByEmail(orderInfo.email);
  
  let catalogTotal = 0;
  let discountedTotal = 0;
  
  for (let i = 0; i < lineItems.length; i++) {
    const item = lineItems[i];
    const discountPrice = parseFloat(item.price);
    const itemQty = item.quantity;
    
    discountedTotal += discountPrice * itemQty;
    
    let catalogPrice = discountPrice;
    for (const name in SHOPIFY_CONFIG.WALLETS) {
      if (SHOPIFY_CONFIG.WALLETS[name] === item.variant_id) {
        catalogPrice = parseFloat(SHOPIFY_CONFIG.PRICES[name] || discountPrice);
        break;
      }
    }
    catalogTotal += catalogPrice * itemQty;
  }
  
  const discountAmount = (catalogTotal - discountedTotal).toFixed(2);
  
  Logger.log('üí∞ Catalog total: RM' + catalogTotal.toFixed(2));
  Logger.log('üí∞ After discount: RM' + discountedTotal.toFixed(2));
  Logger.log('üí∞ Discount: RM' + discountAmount);
  
  const paymentId = 'pi_' + Utilities.getUuid().replace(/-/g, '').substring(0, 24);
  
  const draftPayload = {
    draft_order: {
      line_items: lineItems.map(function(item) {
        return {
          variant_id: item.variant_id,
          quantity: item.quantity
        };
      }),
      customer: existingCustomerId ? 
        { id: existingCustomerId } : 
        { first_name: orderInfo.name, email: orderInfo.email },
      shipping_address: address,
      billing_address: address,
      email: orderInfo.email,
      tags: 'GHL-Import',
      use_customer_default_address: false,
      applied_discount: parseFloat(discountAmount) > 0 ? {
        description: 'Promotion Discount',
        value_type: 'fixed_amount',
        value: discountAmount,
        amount: discountAmount
      } : null
    }
  };
  
  if (existingCustomerId) {
    Logger.log('‚úì Using customer ID: ' + existingCustomerId);
  } else {
    Logger.log('‚ûï Creating new customer');
  }
  
  const draftOptions = {
    method: 'post',
    contentType: 'application/json',
    headers: {
      'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN
    },
    payload: JSON.stringify(draftPayload),
    muteHttpExceptions: true
  };
  
  try {
    Logger.log('üìù Creating draft order...');
    const draftResp = UrlFetchApp.fetch(draftUrl, draftOptions);
    const draftCode = draftResp.getResponseCode();
    
    if (draftCode !== 201) {
      Logger.log('‚ùå Draft Order Error: ' + draftResp.getContentText());
      throw new Error('Failed to create draft: ' + draftResp.getContentText().substring(0, 200));
    }
    
    const draftData = JSON.parse(draftResp.getContentText());
    const draftId = draftData.draft_order.id;
    const draftTotal = draftData.draft_order.total_price;
    
    Logger.log('‚úì Draft created: ' + draftId);
    Logger.log('‚úì Draft total: RM' + draftTotal);
    
    const diff = Math.abs(parseFloat(draftTotal) - discountedTotal);
    if (diff > 1.0) {
      Logger.log('‚ö†Ô∏è WARNING: Price mismatch - Expected RM' + discountedTotal.toFixed(2) + ', Got RM' + draftTotal);
    }
    
    Logger.log('‚úÖ Completing draft order (unpaid)...');
    const completeUrl = 'https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + 
                       '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + 
                       '/draft_orders/' + draftId + '/complete.json';
    
    const completeOptions = {
      method: 'put',
      contentType: 'application/json',
      headers: {
        'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN
      },
      payload: JSON.stringify({ 
        payment_pending: true
      }),
      muteHttpExceptions: true
    };
    
    const completeResp = UrlFetchApp.fetch(completeUrl, completeOptions);
    
    if (completeResp.getResponseCode() !== 200) {
      throw new Error('Failed to complete draft: ' + completeResp.getContentText().substring(0, 200));
    }
    
    const completeData = JSON.parse(completeResp.getContentText());
    const orderId = completeData.draft_order.order_id;
    
    Logger.log('‚úì Order created: ' + orderId);
    
    Utilities.sleep(1500);
    
    const orderUrl = 'https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + 
                     '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + 
                     '/orders/' + orderId + '.json';
    
    const orderResp = UrlFetchApp.fetch(orderUrl, {
      method: 'get',
      headers: { 'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN },
      muteHttpExceptions: true
    });
    
    if (orderResp.getResponseCode() !== 200) {
      throw new Error('Failed to retrieve order');
    }
    
    const order = JSON.parse(orderResp.getContentText()).order;
    
    Logger.log('‚úì Order: ' + order.name);
    Logger.log('‚úì Total: RM' + order.total_price);
    Logger.log('‚úì Initial status: ' + order.financial_status);
    
    Logger.log('üí≥ Recording Stripe payment...');
    const transUrl = 'https://' + SHOPIFY_CONFIG.SHOP_DOMAIN + 
                     '/admin/api/' + SHOPIFY_CONFIG.API_VERSION + 
                     '/orders/' + orderId + '/transactions.json';
    
    const transOptions = {
      method: 'post',
      contentType: 'application/json',
      headers: {
        'X-Shopify-Access-Token': SHOPIFY_CONFIG.ACCESS_TOKEN
      },
      payload: JSON.stringify({
        transaction: {
          kind: 'sale',
          status: 'success',
          amount: order.total_price,
          gateway: 'stripe',
          source: 'external',
          authorization: paymentId,
          currency: 'MYR'
        }
      }),
      muteHttpExceptions: true
    };
    
    const transResp = UrlFetchApp.fetch(transUrl, transOptions);
    
    if (transResp.getResponseCode() === 201) {
      const transData = JSON.parse(transResp.getContentText());
      Logger.log('‚úì Payment recorded: RM' + transData.transaction.amount);
      Logger.log('‚úì Transaction ID: ' + transData.transaction.id);
    } else {
      Logger.log('‚ö†Ô∏è Payment transaction failed: ' + transResp.getContentText());
      throw new Error('Failed to add payment transaction');
    }
    
    Logger.log('‚úÖ Order ready for Sage 300 sync');
    
    return { order: order };
    
  } catch (error) {
    Logger.log('‚ùå Failed: ' + error.toString());
    throw error;
  }
}

// ===== COPY TO SHOPIFY SHEET =====
function copyToShopifySheet(orderInfo, shopifyOrderId) {
  try {
    const ss = SpreadsheetApp.openById(SHOPIFY_CONFIG.SPREADSHEET_ID);
    let sheet = ss.getSheetByName(SHOPIFY_CONFIG.SHOPIFY_SHEET);
    
    if (!sheet) {
      sheet = ss.insertSheet(SHOPIFY_CONFIG.SHOPIFY_SHEET);
      
      const headers = ['Timestamp', 'Name', 'Email', 'Phone', 'Order Summary', 'Total Price', 'Shopify Order ID'];
      sheet.getRange(1, 1, 1, 7).setValues([headers])
        .setFontWeight('bold')
        .setBackground('#34A853')
        .setFontColor('white');
      sheet.setFrozenRows(1);
    }
    
    const row = [
      new Date(),
      orderInfo.name,
      orderInfo.email,
      orderInfo.phone,
      orderInfo.orderSummary,
      orderInfo.totalPrice,
      shopifyOrderId
    ];
    
    sheet.appendRow(row);
    SpreadsheetApp.flush();
    
    Logger.log('‚úì Copied to Shopify sheet');
    
  } catch (error) {
    Logger.log('‚ö†Ô∏è Could not copy to sheet: ' + error.toString());
  }
}

// ===== PROCESS ALL PENDING ORDERS (WITH CONFIGURABLE BATCH LIMIT) =====
function processAllPendingOrders() {
  const ss = SpreadsheetApp.openById(SHOPIFY_CONFIG.SPREADSHEET_ID);
  const sheet = ss.getSheetByName(SHOPIFY_CONFIG.ORDERS_SHEET);
  
  if (!sheet) {
    Logger.log('‚ùå Orders sheet not found');
    SpreadsheetApp.getUi().alert('Error', 'Orders sheet not found', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) {
    Logger.log('‚ÑπÔ∏è No orders to process');
    SpreadsheetApp.getUi().alert('Info', 'No orders to process', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  
  const batchLimit = SHOPIFY_CONFIG.BATCH_LIMIT;
  
  Logger.log('üìä Batch limit set to: ' + batchLimit + ' orders');
  
  const data = sheet.getRange(2, 1, lastRow - 1, 18).getValues();  // Read up to column R
  let processed = 0;
  let errors = 0;
  let skipped = 0;
  
  for (let i = 0; i < data.length; i++) {
    if (processed >= batchLimit) {
      Logger.log('‚è∏Ô∏è Batch limit reached (' + batchLimit + ' orders processed)');
      break;
    }
    
    const rowIndex = i + 2;
    const status = String(data[i][13] || '').trim();  // Column N
    const shopifyOrderId = data[i][15];  // Column P
    
    if (status === 'Pending' && !shopifyOrderId) {
      Logger.log('\nüì¶ Processing row ' + rowIndex + ' (' + (processed + 1) + ' of ' + batchLimit + ')');
      try {
        processOrder(sheet, rowIndex, data[i]);
        processed++;
        Utilities.sleep(2000);
      } catch (error) {
        errors++;
        Logger.log('‚ùå Error on row ' + rowIndex + ': ' + error.toString());
      }
    } else if (status === 'Pending' && shopifyOrderId) {
      skipped++;
    }
  }
  
  Logger.log('\n‚úÖ Batch processing complete!');
  Logger.log('üìä Summary:');
  Logger.log('  ‚Ä¢ Processed: ' + processed + ' orders');
  Logger.log('  ‚Ä¢ Errors: ' + errors);
  Logger.log('  ‚Ä¢ Skipped (already created): ' + skipped);
  
  let message = 'Batch Processing Complete\n\n';
  message += 'Processed: ' + processed + ' orders\n';
  message += 'Errors: ' + errors + '\n';
  if (skipped > 0) {
    message += 'Skipped: ' + skipped + ' (already created)\n';
  }
  message += '\nBatch Limit: ' + batchLimit + ' orders per run';
  message += '\n\nTo process more orders:';
  message += '\n1. Change BATCH_LIMIT in config';
  message += '\n2. Or run this function again';
  
  SpreadsheetApp.getUi().alert(
    'Process Complete',
    message,
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// ===== SETUP HELPER =====
function setupShopifyColumns() {
  const ss = SpreadsheetApp.openById(SHOPIFY_CONFIG.SPREADSHEET_ID);
  const sheet = ss.getSheetByName(SHOPIFY_CONFIG.ORDERS_SHEET);
  
  if (!sheet) {
    Logger.log('‚ùå Sheet not found');
    return;
  }
  
  const lastCol = sheet.getLastColumn();
  const headers = sheet.getRange(1, 1, 1, lastCol).getValues()[0];
  
  const required = ['Status', 'Error Message', 'Shopify Order ID'];
  
  for (let i = 0; i < required.length; i++) {
    if (headers.indexOf(required[i]) === -1) {
      const newCol = lastCol + 1;
      sheet.getRange(1, newCol).setValue(required[i])
        .setFontWeight('bold')
        .setBackground('#4285f4')
        .setFontColor('white');
      Logger.log('‚úì Added column: ' + required[i]);
    }
  }
  
  Logger.log('‚úÖ Setup complete');
}
